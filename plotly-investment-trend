{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import packages \n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from plotly.subplots import make_subplots\n",
    "import plotly.graph_objects as go\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read csv input files for BTC, Gold, S&P 500 and CPI data: 2014 to 2021 \n",
    "# Convert default \"Date\" column from string to date format using parse_dates and assign date to index_col  \n",
    "\n",
    "bitcoin = pd.read_csv('./data/bitcoin-usd.csv',parse_dates=['date'], index_col='date', dtype=np.float64)\n",
    "sp500 = pd.read_csv('./data/sp500.csv',parse_dates = [\"date\"], index_col = \"date\", dtype=np.float64)\n",
    "monthly_data = pd.read_csv('./data/monthly_data.csv',parse_dates = [\"date\"], index_col = \"date\", dtype=np.float64)\n",
    "\n",
    "bitcoin.fillna(method='ffill', inplace=True)\n",
    "sp500.fillna(method='ffill', inplace=True)\n",
    "monthly_data.fillna(method='ffill', inplace=True)\n",
    "\n",
    "# Resample bitcoin and S&P daily data into monthly averages\n",
    "bitcoin_mth = bitcoin.resample('MS').mean()\n",
    "sp500_mth= sp500.resample('MS').mean()\n",
    "\n",
    "# Create an Empty DataFrame for monthly returns\n",
    "mth_return = pd.DataFrame(columns = ['BTC_%chg','G_%chg','S&P_%chg','inf%'], dtype=np.float64)\n",
    "\n",
    "# Add monthly % change from daily close prices \n",
    "mth_return['BTC_%chg']= np.log(bitcoin_mth['close']/bitcoin_mth['close'].iloc[1]).bfill()\n",
    "mth_return['G_%chg']= np.log(monthly_data['gold_usd']/monthly_data['gold_usd'].iloc[1]).bfill()\n",
    "mth_return['S&P_%chg']= np.log(sp500_mth['close']/sp500_mth['close'].iloc[1]).bfill()\n",
    "mth_return['inf%']= np.log(monthly_data['cpi_us']/monthly_data['cpi_us'].iloc[1]).bfill()\n",
    "\n",
    "# Fill NaN with zeroes\n",
    "mth_return.fillna(0, inplace=True)  \n",
    "\n",
    "# Write the monthly data to a new dataframe to be for portfolio optimization\n",
    "BTCclose = bitcoin_mth['close']\n",
    "Sandpclose = sp500_mth['close']\n",
    "goldclose= monthly_data['gold_usd']\n",
    "dfAll = pd.DataFrame({'BTC':BTCclose, 'S&P':Sandpclose, 'Gold':goldclose}, index=bitcoin_mth.index)\n",
    "dfAll.fillna(0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot chart with three series BTC, S&P and Gold depicting returns and inflation\n",
    "# The inflation here is plotted as an increase in the basket of prices to improve readability.\n",
    "# Impact of the COVID-19 pandemic on investment performance\n",
    "\n",
    "fig = make_subplots(rows=4, cols=1,\n",
    "                    specs=[[{'secondary_y': True}], \n",
    "                           [{'secondary_y': True}],\n",
    "                           [{'secondary_y': True}], \n",
    "                           [{'secondary_y': True}]],\n",
    "                    subplot_titles=('BTC/Inflation','S&P500/Inflation', 'Gold/Inflation', 'Pandemic trend 2020/2021'),\n",
    "                    vertical_spacing=0.08, horizontal_spacing =0.1)        \n",
    "# Top left\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=mth_return.index, y=mth_return['BTC_%chg'], name='BTC', line=dict(color='blue')),\n",
    "    row=1, col=1, secondary_y=False)\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=mth_return.index, y=mth_return['inf%'], name='Inf%',line=dict(color='black'), showlegend=False),\n",
    "    row=1, col=1,secondary_y=True)\n",
    "\n",
    "# Top right\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=mth_return.index, y=mth_return['S&P_%chg'], name=\"S&P\", line=dict(color='green')),\n",
    "    row=2, col=1, secondary_y=False)\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=mth_return.index, y=mth_return['inf%'], name='Inf', line=dict(color='black'),showlegend=False),\n",
    "    row=2, col=1, secondary_y=True)\n",
    "\n",
    "# Bottom left\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=mth_return.index, y=mth_return['G_%chg'], name=\"Gold\", line=dict(color='orange')),\n",
    "    row=3, col=1, secondary_y=False)\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=mth_return.index, y=mth_return['inf%'], name=\"Inflation\", line=dict(color='black')),\n",
    "    row=3, col=1, secondary_y=True)\n",
    "\n",
    "# Bottom right\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=mth_return.index, y=mth_return['BTC_%chg'], name=\"BTC\", line=dict(color='blue'),showlegend=False),\n",
    "    row=4, col=1, secondary_y=False)\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=mth_return.index, y=mth_return['S&P_%chg'], name=\"S&P\", line=dict(color='green'),showlegend=False),\n",
    "    row=4, col=1, secondary_y=True)\n",
    "fig.add_trace(\n",
    "    go.Scatter(x=mth_return.index, y=mth_return['G_%chg'], name=\"Gold\", line=dict(color='orange'),showlegend=False),\n",
    "    row=4, col=1, secondary_y=True)\n",
    "\n",
    "# Update layout of the charts\n",
    "fig.update_annotations(font_size=12, yanchor='bottom')         \n",
    "fig.update_layout(autosize=False, height=800, width=800,\n",
    "                title={\n",
    "                    'text': \"Returns and Inflation by Month\",\n",
    "                    'x':0.4,\n",
    "                    'xanchor': 'center',                      \n",
    "                    'yanchor': 'top'})                        \n",
    "\n",
    "# Update axes \n",
    "fig.update_xaxes(dtick=\"M9\", tickformat='%b\\n%y')             \n",
    "fig.update_yaxes(autorange=False, range=[2,6],secondary_y=False, row=4, col=1)\n",
    "fig.update_xaxes(autorange=False, range=['2020-01-01','2021-11-01'], row=4, col=1)\n",
    "\n",
    "# Add shaded spaces to the charts to indicate BTC halving dates, 07/2016 and 05/2020\n",
    "fig.add_vrect(\n",
    "    x0=\"2016-07-31\", x1=\"2016-08-31\",\n",
    "    fillcolor=\"Purple\", opacity=0.5,\n",
    "    layer=\"below\", line_width=0, row=1, col=1)\n",
    "\n",
    "fig.add_vrect(\n",
    "    x0=\"2020-04-30\", x1=\"2020-05-31\",\n",
    "    fillcolor=\"Purple\", opacity=0.5,\n",
    "    layer=\"below\", line_width=0, row=1, col=1)\n",
    "\n",
    "# Add shaded space to the last chart to indicate start of the COVID-19 pandemic, 03/2020\n",
    "fig.add_vrect(\n",
    "    x0=\"2020-02-28\", x1=\"2020-03-31\",\n",
    "    fillcolor=\"Purple\", opacity=0.5,\n",
    "    layer=\"below\", line_width=0, row=4, col=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
